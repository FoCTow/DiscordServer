#----------------------------------------------------------------------------------------------------------
import requests
import time
import json
import os
#----------------------------------------------------------------------------------------------------------
from . import project
from . import attributes as at
#----------------------------------------------------------------------------------------------------------
class PAGE:
    #------------------------------------------------------------------------------------------------------
    hookNAME = None
    hookDATA = None
    seasonSUFFIX = None
    #------------------------------------------------------------------------------------------------------
    project = None
    url = None
    #------------------------------------------------------------------------------------------------------
    pageDATA = None
    defaultsDATA = None
    #------------------------------------------------------------------------------------------------------
    postDATA = list()
    #------------------------------------------------------------------------------------------------------
    def __init__( self, hookNAME, hookDATA, seasonSUFFIX=None ):
        #--------------------------------------------------------------------------------------------------
        self.hookNAME = hookNAME
        self.hookDATA = hookDATA
        self.seasonSUFFIX = seasonSUFFIX
        #--------------------------------------------------------------------------------------------------
        self.project = project.Project()
        self.url = self.project.getURL( self.hookNAME )
        #--------------------------------------------------------------------------------------------------
        self.pageDATA = self.getPatchedJSON( self.hookDATA, self.seasonSUFFIX)
        self.defaultsDATA = self.getPatchedJSON( at.FILE_______DEFAULTS, self.seasonSUFFIX )
        #--------------------------------------------------------------------------------------------------
        self.parsePostDATA( splitEmbeds=True )
        self.applyDefaults()
        #--------------------------------------------------------------------------------------------------
    #------------------------------------------------------------------------------------------------------
    def getPatchedJSON( self, dataFILE, seasonSUFFIX ):
        #--------------------------------------------------------------------------------------------------
        jsonFILE = "{}\\{}.json".format( self.project.dataDIR, dataFILE )
        #--------------------------------------------------------------------------------------------------
        if not os.path.isfile( jsonFILE ):
            raise Exception(">> ERROR - Data for <{}> not Found. Expected: {}".format(self.hookDATA, jsonFILE))
        #--------------------------------------------------------------------------------------------------
        with open(jsonFILE, "r", encoding='utf-8') as file: data = json.load( file )
        #--------------------------------------------------------------------------------------------------
        if seasonSUFFIX:
            #----------------------------------------------------------------------------------------------
            jsonFILE = "{}\\{}_{}.json".format( self.project.dataDIR, dataFILE, seasonSUFFIX )
            if not os.path.isfile( jsonFILE ):
                print(">> WARNING - Season Data <{}> for <{}> not Found. Expected: {}".format(self.seasonSUFFIX, dataFILE, jsonFILE))
            else:
                with open(jsonFILE, "r", encoding='utf-8') as file: overrides = json.load( file )
                data = self.updateDict( data, overrides )
        #--------------------------------------------------------------------------------------------------
        return data
    #------------------------------------------------------------------------------------------------------
    def updateDict( self, dataDICT, overrideDICT, allowOverride=True ):
        #--------------------------------------------------------------------------------------------------
        for key in overrideDICT:
            #----------------------------------------------------------------------------------------------
            if type(overrideDICT[key]) is dict and key in dataDICT:
                #------------------------------------------------------------------------------------------
                if not key in dataDICT: dataDICT[key] = overrideDICT[key]
                else: dataDICT[key] = self.updateDict( dataDICT[key], overrideDICT[key], allowOverride )
            #----------------------------------------------------------------------------------------------
            elif type( overrideDICT[key] ) is list and key in dataDICT:
                #------------------------------------------------------------------------------------------
                temp = list()
                #------------------------------------------------------------------------------------------
                for i, x in enumerate( overrideDICT[key] ):
                    if i < len( dataDICT[key] ): temp.append(self.updateDict(dataDICT[key][i], overrideDICT[key][i], allowOverride))
                    else: temp.append(self.updateDict({}, overrideDICT[key][i], allowOverride))
                #------------------------------------------------------------------------------------------
                dataDICT[key] = temp
            #----------------------------------------------------------------------------------------------
            else:
                if allowOverride or not key in dataDICT: dataDICT[key] = overrideDICT[key]
        #--------------------------------------------------------------------------------------------------
        return dataDICT
    #------------------------------------------------------------------------------------------------------
    def applyDefaults( self ):
        #--------------------------------------------------------------------------------------------------
        self.postDATA = [ self.updateDict(post, self.defaultsDATA, allowOverride=False) for post in self.postDATA ]
    #------------------------------------------------------------------------------------------------------
    def parsePostDATA( self, splitEmbeds=True ):
        #--------------------------------------------------------------------------------------------------
        if not at.KEY________PAGEDATA in self.pageDATA:
            #----------------------------------------------------------------------------------------------
            raise Exception(">> ERROR - No valid Page Data for <{}>. Expected Keyword <{}> in JSON".format(self.hookDATA, at.KEY________PAGEDATA))
        #--------------------------------------------------------------------------------------------------
        for dataBlock in self.pageDATA[at.KEY________PAGEDATA]:
            #----------------------------------------------------------------------------------------------
            if not at.KEY________POSTDATA in dataBlock:
                raise Exception(">> ERROR - Post without valid Datablock in <{}>. Expected Keyword <{}> in JSON".format( self.hookDATA, at.KEY________POSTDATA ) )
            #----------------------------------------------------------------------------------------------
            dataBlock = dataBlock[at.KEY________POSTDATA]
            #----------------------------------------------------------------------------------------------
            if splitEmbeds and "embeds" in dataBlock and len(dataBlock["embeds"])>1:
                for embed in dataBlock["embeds"]:
                    #--------------------------------------------------------------------------------------
                    temp = dataBlock.copy()
                    temp["embeds"] = [embed]
                    #--------------------------------------------------------------------------------------
                    self.postDATA.append(temp)
            #----------------------------------------------------------------------------------------------
            else: self.postDATA.append(dataBlock)
    #------------------------------------------------------------------------------------------------------
    def push( self ):
        #--------------------------------------------------------------------------------------------------
        for data in self.postDATA: self.post( data )
    #------------------------------------------------------------------------------------------------------
    def get( self ):
        #--------------------------------------------------------------------------------------------------

        #--------------------------------------------------------------------------------------------------
        #--------------------------------------------------------------------------------------------------
        pass
    #------------------------------------------------------------------------------------------------------
    def post( self, data ):
        #--------------------------------------------------------------------------------------------------
        time.sleep(1)
        result = requests.post( self.url, data=json.dumps( data ).encode('utf-8'), headers={ "Content-Type": "application/json" } )
        #--------------------------------------------------------------------------------------------------
        try:
            result.raise_for_status()
        except requests.exceptions.HTTPError as err:
            print( err )
        else:
            print( "Payload delivered successfully, code {}.".format( result.status_code ) )
    #------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------
##----------------------------------------------------------------------------------------------------------
#def post ( url, data ):
#    #------------------------------------------------------------------------------------------------------
#    result = requests.post(url, data=json.dumps(data), headers={"Content-Type": "application/json"})
#    #------------------------------------------------------------------------------------------------------
#    try:
#        result.raise_for_status()
#    except requests.exceptions.HTTPError as err:
#        print(err)
#    else:
#        print("Payload delivered successfully, code {}.".format(result.status_code))
##----------------------------------------------------------------------------------------------------------
